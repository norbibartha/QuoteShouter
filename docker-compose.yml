services:
  database:
    container_name: database
    image: mysql:8
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    env_file:
      - .env
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
      # Where our data will be persisted
    volumes:
      - mysql:/var/lib/mysql
    networks:
      backend:

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - '9000:9000'
    volumes:
      - api:/var/www/api
    networks:
      backend:

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - '8080:80'
    env_file:
      - .env
    volumes:
      - api:/var/www/api
      - nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      backend:

  redis:
    container_name: redis
    image: nginx:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "8080:80"
    env_file:
      - .env
    volumes:
      - redis_data:/var/www/api
    networks:
      backend:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      # data persistence
      - /docker_conf/rabbitmq/data/:/var/lib/rabbitmq/
      # data mapping -> host: container
      # queues and messages data of the container will be stored on the host
    environment:
      - RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    restart: always
    networks:
      backend:

  consumer-1:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - consumer:/var/www/consumer
    networks:
      backend:

  consumer-2:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - consumer:/var/www/consumer
    networks:
      backend:

networks:
  backend: